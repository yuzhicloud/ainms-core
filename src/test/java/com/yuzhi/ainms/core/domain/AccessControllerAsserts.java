package com.yuzhi.ainms.core.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AccessControllerAsserts {

  /**
   * Asserts that the entity has all properties (fields/relationships) set.
   *
   * @param expected the expected entity
   * @param actual the actual entity
   */
  public static void assertAccessControllerAllPropertiesEquals(
    AccessController expected,
    AccessController actual
  ) {
    assertAccessControllerAutoGeneratedPropertiesEquals(expected, actual);
    assertAccessControllerAllUpdatablePropertiesEquals(expected, actual);
  }

  /**
   * Asserts that the entity has all updatable properties (fields/relationships) set.
   *
   * @param expected the expected entity
   * @param actual the actual entity
   */
  public static void assertAccessControllerAllUpdatablePropertiesEquals(
    AccessController expected,
    AccessController actual
  ) {
    assertAccessControllerUpdatableFieldsEquals(expected, actual);
    assertAccessControllerUpdatableRelationshipsEquals(expected, actual);
  }

  /**
   * Asserts that the entity has all the auto generated properties (fields/relationships) set.
   *
   * @param expected the expected entity
   * @param actual the actual entity
   */
  public static void assertAccessControllerAutoGeneratedPropertiesEquals(
    AccessController expected,
    AccessController actual
  ) {
    assertThat(expected)
      .as("Verify AccessController auto generated properties")
      .satisfies(
        e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId())
      );
  }

  /**
   * Asserts that the entity has all the updatable fields set.
   *
   * @param expected the expected entity
   * @param actual the actual entity
   */
  public static void assertAccessControllerUpdatableFieldsEquals(
    AccessController expected,
    AccessController actual
  ) {
    assertThat(expected)
      .as("Verify AccessController relevant properties")
      .satisfies(
        e ->
          assertThat(e.getNedn()).as("check nedn").isEqualTo(actual.getNedn())
      )
      .satisfies(
        e ->
          assertThat(e.getNeid()).as("check neid").isEqualTo(actual.getNeid())
      )
      .satisfies(
        e ->
          assertThat(e.getAliasname())
            .as("check aliasname")
            .isEqualTo(actual.getAliasname())
      )
      .satisfies(
        e ->
          assertThat(e.getNename())
            .as("check nename")
            .isEqualTo(actual.getNename())
      )
      .satisfies(
        e ->
          assertThat(e.getNecategory())
            .as("check necategory")
            .isEqualTo(actual.getNecategory())
      )
      .satisfies(
        e ->
          assertThat(e.getNetype())
            .as("check netype")
            .isEqualTo(actual.getNetype())
      )
      .satisfies(
        e ->
          assertThat(e.getNevendorname())
            .as("check nevendorname")
            .isEqualTo(actual.getNevendorname())
      )
      .satisfies(
        e ->
          assertThat(e.getNeesn())
            .as("check neesn")
            .isEqualTo(actual.getNeesn())
      )
      .satisfies(
        e ->
          assertThat(e.getNeip()).as("check neip").isEqualTo(actual.getNeip())
      )
      .satisfies(
        e ->
          assertThat(e.getNemac())
            .as("check nemac")
            .isEqualTo(actual.getNemac())
      )
      .satisfies(
        e ->
          assertThat(e.getVersion())
            .as("check version")
            .isEqualTo(actual.getVersion())
      )
      .satisfies(
        e ->
          assertThat(e.getNestate())
            .as("check nestate")
            .isEqualTo(actual.getNestate())
      )
      .satisfies(
        e ->
          assertThat(e.getCreatetime())
            .as("check createtime")
            .isEqualTo(actual.getCreatetime())
      )
      .satisfies(
        e ->
          assertThat(e.getNeiptype())
            .as("check neiptype")
            .isEqualTo(actual.getNeiptype())
      )
      .satisfies(
        e ->
          assertThat(e.getSubnet())
            .as("check subnet")
            .isEqualTo(actual.getSubnet())
      )
      .satisfies(
        e ->
          assertThat(e.getNeosversion())
            .as("check neosversion")
            .isEqualTo(actual.getNeosversion())
      );
  }

  /**
   * Asserts that the entity has all the updatable relationships set.
   *
   * @param expected the expected entity
   * @param actual the actual entity
   */
  public static void assertAccessControllerUpdatableRelationshipsEquals(
    AccessController expected,
    AccessController actual
  ) {}
}
